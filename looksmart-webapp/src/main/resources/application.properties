spring.cloud.gcp.sql.database-name=${DBNAME}
spring.cloud.gcp.sql.instance-connection-name=${INSTANCE_CONNECTION}

# So app starts despite "table already exists" errors.
spring.datasource.continue-on-error=true
# Enforces database initialization
spring.datasource.initialization-mode=always

# Leave empty for root, uncomment and fill out if you specified a user
spring.datasource.username=${DBUSER}

# Uncomment if root password is specified
spring.datasource.password=${DBPASS}

## Session store type
#spring.session.store-type=jdbc
## Database schema initialization mode
#spring.session.jdbc.initialize-schema=always
## Path to the SQL file to use to initialize the database schema
#spring.session.jdbc.schema=classpath:org/springframework/session/jdbc/schema-@@platform@@.sq
## Name of the database table used to store sessions
#spring.session.jdbc.table-name=SPRING_SESSION

spring.thymeleaf.cache=false